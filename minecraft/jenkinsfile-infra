pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    }

    tools {
        terraform 'terraform'
        maven 'localMaven'
        jdk 'localJdk'
    }

    stages {
        stage('Git Checkout') {
            steps {
                echo 'Cloning the application code...'
                git branch: 'master', url: 'https://github.com/Dappyplay4u/automatedcicd.git'
            }
        }

        stage('Verify Terraform Version') {
            steps {
                echo 'Verifying the Terraform version'
                sh 'terraform --version'
            }
        }

        stage('Terraform Init') {
            steps {
                echo 'Initializing Terraform....'
                dir('eks-blueprint/k8s-minecraft') {
                    sh 'terraform init'
                }
            }
        }

        stage('Terraform Validate') {
            steps {
                echo 'Validating Terraform configuration....'
                dir('eks-blueprint/k8s-minecraft') {
                    sh 'terraform validate'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                echo 'Planning Terraform changes....'
                dir('eks-blueprint/k8s-minecraft') {
                    sh 'terraform plan'
                }
            }
        }

        stage('CheckOV Scan') {
            steps {
                echo 'Performing CheckOV scan....'
                dir('eks-blueprint/k8s-minecraft') {
                    // Add CheckOV scan steps here
                }
            }
        }

        stage('Manual Approval') {
            steps {
                input 'Approval required for deployment'
            }
        }

        stage('Terraform Apply') {
            steps {
                echo 'Applying Terraform changes......'
                dir('eks-blueprint/k8s-minecraft') {
                    sh 'terraform apply -auto-approve'
                }
            }
        }

        stage('Install kubectl') {
            steps {
                script {
                    sh '''
                        # Specify the kubectl version
                        KUBECTL_VERSION="v1.24.0"

                        # Download kubectl binary
                        curl -LO "https://storage.googleapis.com/kubernetes-release/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"

                        # Make the kubectl binary executable
                        chmod +x kubectl

                        # Move kubectl binary to a directory in the PATH
                        sudo mv kubectl /usr/local/bin/
                    '''
                }
            }
        }

        stage('Approval for Terraform Destroy') {
            steps {
                input "Do you want to proceed with destroying Terraform resources?"
            }
        }

        stage('Destroy') {
            steps {
                script {
                    dir('eks-blueprint/k8s-minecraft') {
                        // Unstash Terraform plan and execute Terraform destroy
                        unstash 'terraform-plan'
                        sh 'terraform destroy -auto-approve'
                    }
                }
            }
        }
    }

        post {
            always {
                echo 'Minecraft Server Infrastructure successfully decommissioned!'
        }
    }
}   
